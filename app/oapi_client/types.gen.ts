// This file is auto-generated by @hey-api/openapi-ts

export type XMetadata = {
    /**
     * Returns the total item count of the collection you're querying.
     */
    total_count?: number;
    /**
     * Returns the item count of the collection you're querying, taking the current filter/search parameters into account.
     */
    filter_count?: number;
};

export type ItemsThesurveReports = {
    id?: number;
    status?: string;
    date_created?: string | null;
    date_updated?: string | null;
    reporter_name?: string | null;
    reporter_email?: string | null;
    reported_posting?: string | ItemsThesurvePostings | null;
    report_description?: string | null;
};

export type ItemsThesurvePostings = {
    id: string;
    date_created?: string | null;
    date_updated?: string | null;
    submitter?: string | null;
    course: string;
    survey_link: string;
    school: string;
    submitter_email?: string | null;
    survey_title?: string | null;
    estimated_time?: string | null;
    description?: string | null;
};

export type CreateItemsThesurveReportsData = {
    body?: Array<ItemsThesurveReports> | ItemsThesurveReports;
    path?: never;
    query?: {
        /**
         * What metadata to return in the response.
         */
        meta?: string;
    };
    url: '/items/thesurve_reports';
};

export type CreateItemsThesurveReportsErrors = {
    /**
     * Error: Unauthorized request
     */
    401: {
        error?: {
            code?: number;
            message?: string;
        };
    };
};

export type CreateItemsThesurveReportsError = CreateItemsThesurveReportsErrors[keyof CreateItemsThesurveReportsErrors];

export type CreateItemsThesurveReportsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: unknown;
    };
};

export type CreateItemsThesurveReportsResponse = CreateItemsThesurveReportsResponses[keyof CreateItemsThesurveReportsResponses];

export type ReadItemsThesurvePostingsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Control what fields are being returned in the object.
         */
        fields?: Array<string>;
        /**
         * A limit on the number of objects that are returned.
         */
        limit?: number;
        /**
         * What metadata to return in the response.
         */
        meta?: string;
        /**
         * How many items to skip when fetching data.
         */
        offset?: number;
        /**
         * How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
         *
         */
        sort?: Array<string>;
        /**
         * Select items in collection by given conditions.
         */
        filter?: {
            [key: string]: unknown;
        };
        /**
         * Filter by items that contain the given search query in one of their fields.
         */
        search?: string;
    };
    url: '/items/thesurve_postings';
};

export type ReadItemsThesurvePostingsErrors = {
    /**
     * Error: Unauthorized request
     */
    401: {
        error?: {
            code?: number;
            message?: string;
        };
    };
};

export type ReadItemsThesurvePostingsError = ReadItemsThesurvePostingsErrors[keyof ReadItemsThesurvePostingsErrors];

export type ReadItemsThesurvePostingsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<ItemsThesurvePostings>;
        meta?: XMetadata;
    };
};

export type ReadItemsThesurvePostingsResponse = ReadItemsThesurvePostingsResponses[keyof ReadItemsThesurvePostingsResponses];

export type CreateItemsThesurvePostingsData = {
    body?: Array<ItemsThesurvePostings> | ItemsThesurvePostings;
    path?: never;
    query?: {
        /**
         * What metadata to return in the response.
         */
        meta?: string;
    };
    url: '/items/thesurve_postings';
};

export type CreateItemsThesurvePostingsErrors = {
    /**
     * Error: Unauthorized request
     */
    401: {
        error?: {
            code?: number;
            message?: string;
        };
    };
};

export type CreateItemsThesurvePostingsError = CreateItemsThesurvePostingsErrors[keyof CreateItemsThesurvePostingsErrors];

export type CreateItemsThesurvePostingsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: unknown;
    };
};

export type CreateItemsThesurvePostingsResponse = CreateItemsThesurvePostingsResponses[keyof CreateItemsThesurvePostingsResponses];

export type ReadSingleItemsThesurvePostingsData = {
    body?: never;
    path: {
        /**
         * Index of the item.
         */
        id: number | string;
    };
    query?: {
        /**
         * Control what fields are being returned in the object.
         */
        fields?: Array<string>;
        /**
         * What metadata to return in the response.
         */
        meta?: string;
        /**
         * Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
         *
         */
        version?: string;
    };
    url: '/items/thesurve_postings/{id}';
};

export type ReadSingleItemsThesurvePostingsErrors = {
    /**
     * Error: Unauthorized request
     */
    401: {
        error?: {
            code?: number;
            message?: string;
        };
    };
    /**
     * Error: Not found.
     */
    404: {
        error?: {
            code?: number;
            message?: string;
        };
    };
};

export type ReadSingleItemsThesurvePostingsError = ReadSingleItemsThesurvePostingsErrors[keyof ReadSingleItemsThesurvePostingsErrors];

export type ReadSingleItemsThesurvePostingsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: ItemsThesurvePostings;
    };
};

export type ReadSingleItemsThesurvePostingsResponse = ReadSingleItemsThesurvePostingsResponses[keyof ReadSingleItemsThesurvePostingsResponses];

export type ClientOptions = {
    baseURL: `${string}://directus-internal.dicedvo.org` | (string & {});
};