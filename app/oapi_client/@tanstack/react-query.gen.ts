// This file is auto-generated by @hey-api/openapi-ts

import { type Options, createItemsThesurveReports, readItemsThesurvePostings, createItemsThesurvePostings, readSingleItemsThesurvePostings } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { CreateItemsThesurveReportsData, CreateItemsThesurveReportsError, CreateItemsThesurveReportsResponse, ReadItemsThesurvePostingsData, ReadItemsThesurvePostingsError, ReadItemsThesurvePostingsResponse, CreateItemsThesurvePostingsData, CreateItemsThesurvePostingsError, CreateItemsThesurvePostingsResponse, ReadSingleItemsThesurvePostingsData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const createItemsThesurveReportsQueryKey = (options?: Options<CreateItemsThesurveReportsData>) => [
    createQueryKey('createItemsThesurveReports', options)
];

export const createItemsThesurveReportsOptions = (options?: Options<CreateItemsThesurveReportsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createItemsThesurveReports({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createItemsThesurveReportsQueryKey(options)
    });
};

export const createItemsThesurveReportsMutation = (options?: Partial<Options<CreateItemsThesurveReportsData>>) => {
    const mutationOptions: UseMutationOptions<CreateItemsThesurveReportsResponse, AxiosError<CreateItemsThesurveReportsError>, Options<CreateItemsThesurveReportsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createItemsThesurveReports({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readItemsThesurvePostingsQueryKey = (options?: Options<ReadItemsThesurvePostingsData>) => [
    createQueryKey('readItemsThesurvePostings', options)
];

export const readItemsThesurvePostingsOptions = (options?: Options<ReadItemsThesurvePostingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readItemsThesurvePostings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readItemsThesurvePostingsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const readItemsThesurvePostingsInfiniteQueryKey = (options?: Options<ReadItemsThesurvePostingsData>): QueryKey<Options<ReadItemsThesurvePostingsData>> => [
    createQueryKey('readItemsThesurvePostings', options, true)
];

export const readItemsThesurvePostingsInfiniteOptions = (options?: Options<ReadItemsThesurvePostingsData>) => {
    return infiniteQueryOptions<ReadItemsThesurvePostingsResponse, AxiosError<ReadItemsThesurvePostingsError>, InfiniteData<ReadItemsThesurvePostingsResponse>, QueryKey<Options<ReadItemsThesurvePostingsData>>, number | Pick<QueryKey<Options<ReadItemsThesurvePostingsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ReadItemsThesurvePostingsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await readItemsThesurvePostings({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readItemsThesurvePostingsInfiniteQueryKey(options)
    });
};

export const createItemsThesurvePostingsQueryKey = (options?: Options<CreateItemsThesurvePostingsData>) => [
    createQueryKey('createItemsThesurvePostings', options)
];

export const createItemsThesurvePostingsOptions = (options?: Options<CreateItemsThesurvePostingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createItemsThesurvePostings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createItemsThesurvePostingsQueryKey(options)
    });
};

export const createItemsThesurvePostingsMutation = (options?: Partial<Options<CreateItemsThesurvePostingsData>>) => {
    const mutationOptions: UseMutationOptions<CreateItemsThesurvePostingsResponse, AxiosError<CreateItemsThesurvePostingsError>, Options<CreateItemsThesurvePostingsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createItemsThesurvePostings({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readSingleItemsThesurvePostingsQueryKey = (options: Options<ReadSingleItemsThesurvePostingsData>) => [
    createQueryKey('readSingleItemsThesurvePostings', options)
];

export const readSingleItemsThesurvePostingsOptions = (options: Options<ReadSingleItemsThesurvePostingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readSingleItemsThesurvePostings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readSingleItemsThesurvePostingsQueryKey(options)
    });
};